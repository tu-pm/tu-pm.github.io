<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Minimalista</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Minimalista</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 03 Oct 2019 11:31:03 +0700</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How NOT to get panicked using Go channels</title>
      <link>/posts/go_channel/</link>
      <pubDate>Thu, 03 Oct 2019 11:31:03 +0700</pubDate>
      
      <guid>/posts/go_channel/</guid>
      <description>In this article, I&amp;rsquo;ll share some of my experiences about how to work with Golang channels effectively without having a total panic attack. Hope you&amp;rsquo;ll enjoy.
Unbuffered channel vs Buffered channel Go channels are like, well, channels, that connect goroutines and help them communicating with each other. A channel is initialized using the chan keyword followed by the type of data that get transferred in the channel. It might also take in another capacity paramenter, which is the size of the queue that messages sit in before the channel is ready to transfer, hence buffered channel.</description>
    </item>
    
  </channel>
</rss>